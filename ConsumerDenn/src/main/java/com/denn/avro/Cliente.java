/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.denn.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Cliente extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -484552154144215216L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cliente\",\"namespace\":\"com.denn.avro\",\"fields\":[{\"name\":\"nome\",\"type\":\"string\"},{\"name\":\"nascimento\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"salario\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<Cliente> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Cliente> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Cliente> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Cliente> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Cliente> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Cliente to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Cliente from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Cliente instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Cliente fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence nome;
  private java.time.LocalDate nascimento;
  private double salario;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Cliente() {}

  /**
   * All-args constructor.
   * @param nome The new value for nome
   * @param nascimento The new value for nascimento
   * @param salario The new value for salario
   */
  public Cliente(java.lang.CharSequence nome, java.time.LocalDate nascimento, java.lang.Double salario) {
    this.nome = nome;
    this.nascimento = nascimento;
    this.salario = salario;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nome;
    case 1: return nascimento;
    case 2: return salario;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nome = (java.lang.CharSequence)value$; break;
    case 1: nascimento = (java.time.LocalDate)value$; break;
    case 2: salario = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'nome' field.
   * @return The value of the 'nome' field.
   */
  public java.lang.CharSequence getNome() {
    return nome;
  }


  /**
   * Sets the value of the 'nome' field.
   * @param value the value to set.
   */
  public void setNome(java.lang.CharSequence value) {
    this.nome = value;
  }

  /**
   * Gets the value of the 'nascimento' field.
   * @return The value of the 'nascimento' field.
   */
  public java.time.LocalDate getNascimento() {
    return nascimento;
  }


  /**
   * Sets the value of the 'nascimento' field.
   * @param value the value to set.
   */
  public void setNascimento(java.time.LocalDate value) {
    this.nascimento = value;
  }

  /**
   * Gets the value of the 'salario' field.
   * @return The value of the 'salario' field.
   */
  public double getSalario() {
    return salario;
  }


  /**
   * Sets the value of the 'salario' field.
   * @param value the value to set.
   */
  public void setSalario(double value) {
    this.salario = value;
  }

  /**
   * Creates a new Cliente RecordBuilder.
   * @return A new Cliente RecordBuilder
   */
  public static com.denn.avro.Cliente.Builder newBuilder() {
    return new com.denn.avro.Cliente.Builder();
  }

  /**
   * Creates a new Cliente RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Cliente RecordBuilder
   */
  public static com.denn.avro.Cliente.Builder newBuilder(com.denn.avro.Cliente.Builder other) {
    if (other == null) {
      return new com.denn.avro.Cliente.Builder();
    } else {
      return new com.denn.avro.Cliente.Builder(other);
    }
  }

  /**
   * Creates a new Cliente RecordBuilder by copying an existing Cliente instance.
   * @param other The existing instance to copy.
   * @return A new Cliente RecordBuilder
   */
  public static com.denn.avro.Cliente.Builder newBuilder(com.denn.avro.Cliente other) {
    if (other == null) {
      return new com.denn.avro.Cliente.Builder();
    } else {
      return new com.denn.avro.Cliente.Builder(other);
    }
  }

  /**
   * RecordBuilder for Cliente instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cliente>
    implements org.apache.avro.data.RecordBuilder<Cliente> {

    private java.lang.CharSequence nome;
    private java.time.LocalDate nascimento;
    private double salario;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.denn.avro.Cliente.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nome)) {
        this.nome = data().deepCopy(fields()[0].schema(), other.nome);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nascimento)) {
        this.nascimento = data().deepCopy(fields()[1].schema(), other.nascimento);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.salario)) {
        this.salario = data().deepCopy(fields()[2].schema(), other.salario);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Cliente instance
     * @param other The existing instance to copy.
     */
    private Builder(com.denn.avro.Cliente other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.nome)) {
        this.nome = data().deepCopy(fields()[0].schema(), other.nome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nascimento)) {
        this.nascimento = data().deepCopy(fields()[1].schema(), other.nascimento);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.salario)) {
        this.salario = data().deepCopy(fields()[2].schema(), other.salario);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'nome' field.
      * @return The value.
      */
    public java.lang.CharSequence getNome() {
      return nome;
    }


    /**
      * Sets the value of the 'nome' field.
      * @param value The value of 'nome'.
      * @return This builder.
      */
    public com.denn.avro.Cliente.Builder setNome(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.nome = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'nome' field has been set.
      * @return True if the 'nome' field has been set, false otherwise.
      */
    public boolean hasNome() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nome' field.
      * @return This builder.
      */
    public com.denn.avro.Cliente.Builder clearNome() {
      nome = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nascimento' field.
      * @return The value.
      */
    public java.time.LocalDate getNascimento() {
      return nascimento;
    }


    /**
      * Sets the value of the 'nascimento' field.
      * @param value The value of 'nascimento'.
      * @return This builder.
      */
    public com.denn.avro.Cliente.Builder setNascimento(java.time.LocalDate value) {
      validate(fields()[1], value);
      this.nascimento = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nascimento' field has been set.
      * @return True if the 'nascimento' field has been set, false otherwise.
      */
    public boolean hasNascimento() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nascimento' field.
      * @return This builder.
      */
    public com.denn.avro.Cliente.Builder clearNascimento() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'salario' field.
      * @return The value.
      */
    public double getSalario() {
      return salario;
    }


    /**
      * Sets the value of the 'salario' field.
      * @param value The value of 'salario'.
      * @return This builder.
      */
    public com.denn.avro.Cliente.Builder setSalario(double value) {
      validate(fields()[2], value);
      this.salario = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'salario' field has been set.
      * @return True if the 'salario' field has been set, false otherwise.
      */
    public boolean hasSalario() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'salario' field.
      * @return This builder.
      */
    public com.denn.avro.Cliente.Builder clearSalario() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Cliente build() {
      try {
        Cliente record = new Cliente();
        record.nome = fieldSetFlags()[0] ? this.nome : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.nascimento = fieldSetFlags()[1] ? this.nascimento : (java.time.LocalDate) defaultValue(fields()[1]);
        record.salario = fieldSetFlags()[2] ? this.salario : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Cliente>
    WRITER$ = (org.apache.avro.io.DatumWriter<Cliente>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Cliente>
    READER$ = (org.apache.avro.io.DatumReader<Cliente>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










